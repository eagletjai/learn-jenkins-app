pipeline {
    agent any

    environment {
        AWS_ECS_CLUSTER_NAME = 'jash-learnjenkins-cluster'
        AWS_ECS_SERVICE_NAME = 'jash-learnjenkins-taskdef-prod-service'
        AWS_ECS_TASK_DEF_NAME = 'jash-learnjenkins-taskdef-prod'
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        REACT_APP_VERSION = "1.0.$BUILD_ID"
        APP_NAME = 'learnjenkinsapp'
        AWS_ECR_REGISTRY = '054301581865.dkr.ecr.ap-southeast-2.amazonaws.com'
    }

    stages {

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }

        stage('Build docker image') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                }
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-s3', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        yum install docker -y
                        docker build -t $AWS_ECR_REGISTRY/$APP_NAME:$REACT_APP_VERSION .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
                        docker push $AWS_ECR_REGISTRY/$APP_NAME:$REACT_APP_VERSION
                    '''
                }
            }
        }

        stage('Deploy to AWS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "-u root --entrypoint=''"
                }
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-s3', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        yum install jq -y
                        sed -i "s/#APP_VERSION#/$REACT_APP_VERSION/g" aws/ecs-taskdef.json
                        LATEST_TD_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/ecs-taskdef.json | jq '.taskDefinition.revision')
                        aws ecs update-service --cluster $AWS_ECS_CLUSTER_NAME --service $AWS_ECS_SERVICE_NAME --task-definition $AWS_ECS_TASK_DEF_NAME:$LATEST_TD_REVISION
                        #aws ecs wait services-stable --cluster $AWS_ECS_CLUSTER_NAME --services $AWS_ECS_SERVICE_NAME
                    '''
                }
            }
        }

    }
}